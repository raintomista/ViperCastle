#GRAPHICS

def artwork():
	print()
	print("                _                       ___              _    _       ")
	print("       /\   /\ (_) _ __    ___  _ __   / __\  __ _  ___ | |_ | |  ___ ")
	print("       \ \ / / | || '_ \  / _ \| '__| / /    / _` |/ __|| __|| | / _ \ ")
	print("        \ V /  | || |_) ||  __/| |   / /___ | (_| |\__ \| |_ | ||  __/")
	print("         \_/   |_|| .__/  \___||_|   \____/  \__,_||___/ \__||_| \___|")
	print("    	          |_| ")
	print("                                   A  P Y T H O N  C H E S S  G A M E ")
	#print("                                        B Y  R A I N   T O M I S T A")
def menu():
	artwork()
	print()
	print("             	                    MENU \n")
	print("                            PRESS 1  |  NEW GAME")
	print("                            PRESS 2  |  LOAD GAME")
	print("                            PRESS 3  |  CREDITS")
	print("                            PRESS 4  |  EXIT")
	print()
	print()
	print("               2015 COPYLEFT RAIN TOMISTA. VIPERCASTLE v0.9")
	print("                    ASCII ART GENERATED BY PATORJK.COM")

def cls():
    os.system(['clear','cls'][os.name == 'nt'])

def p1Axis(): #DISPLAYS THE X-AXIS OF P1'S CHESS BOARD
	print("")
	print("		    ", board[9][0], " ", board[9][1], " ", board[9][2], " ", board[9][3], " ", board[9][4], " ", board[9][5], " ", board[9][6], " ",board[9][7], " ")
	print("		   ╔═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╗")

def p2Axis(): #DISPLAYS THE X-AXIS OF P2'S CHESS BOARD
	print("")
	print("		    ", board[9][7], " ", board[9][6], " ", board[9][5], " ", board[9][4], " ", board[9][3], " ", board[9][2], " ", board[9][1], " ",board[9][0], " ")
	print("		   ╔═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╗")

def chessBoard(): #DISPLAYS THE CHESSBOARD
	cls()
	global turn
	if turn == "P1":
		print(P1 + "'s Turn")
		p1Axis()
		for key in range(len(board)-1, 0, -1):
			if key == 5:
				print("		", key, "║", board[key][0], "║", board[key][1], "║", board[key][2], "║", board[key][3], "║", board[key][4], "║", board[key][5], "║", board[key][6], "║",board[key][7], "║")
				print("		   ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣")
			elif key == 1:
				print("		", key, "║", board[key][0], "║", board[key][1], "║", board[key][2], "║", board[key][3], "║", board[key][4], "║", board[key][5], "║", board[key][6], "║",board[key][7], "║")
				print("		   ╚═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╝")
			else: 
				print("		", key, "║", board[key][0], "║", board[key][1], "║", board[key][2], "║", board[key][3], "║", board[key][4], "║", board[key][5], "║", board[key][6], "║",board[key][7], "║")
				print("		   ╟───╫───╫───╫───╫───╫───╫───╫───╢")
		print()
		#turn = "P2"
	elif turn == "P2":
		print(P2 + "'s Turn")
		p2Axis()
		for key in range(1, len(board)):
			if key == 4:
				print("		", key, "║", board[key][7], "║", board[key][6], "║", board[key][5], "║", board[key][4], "║", board[key][3], "║", board[key][2], "║", board[key][1], "║",board[key][0], "║")
				print("		   ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣")
			elif key == 8:
				print("		", key, "║", board[key][7], "║", board[key][6], "║", board[key][5], "║", board[key][4], "║", board[key][3], "║", board[key][2], "║", board[key][1], "║",board[key][0], "║")
				print("		   ╚═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╝")
			else: 
				print("		", key, "║", board[key][7], "║", board[key][6], "║", board[key][5], "║", board[key][4], "║", board[key][3], "║", board[key][2], "║", board[key][1], "║",board[key][0], "║")
				print("		   ╟───╫───╫───╫───╫───╫───╫───╫───╢")
		print()
		#turn = "P1"

def refreshNew(): #CLEARS THE MENU SCREEN FOR ANIMATING TEXT
	cls()
	artwork()
	print()
	print("             	                 NEW GAME \n")

def refresh(): #CLEARS THE SCREEN AND RE-PRINT THE CHESSBOARD AGAIN
	chessBoard()
	print()

#INPUTS
def getChoice(): #GETS USER INPUT IN THE MENU
	return input("Enter choice: ")

def choosePiece(): #GETS THE USER INPUT FOR SELECTING PIECE
	print()
	print("Tip: Enter the x-coodinate before the y-coordinate e.g. F1.")
	return input("Select the piece you want to move: ")

def chooseDestination(): #GETS THE DESTINATION USER INPUT
	print()
	print("You are moving the chess piece at " + movePiece + ". Change it by typing 'replace' below.")
	return input("Select the destination of the piece: ")

def nameP1(): #GETS THE NAME OF PLAYER 1
	return input("Enter P1 Name: ")

def nameP2(): #GETS THE NAME OF PLAYER 2
	return input("Enter P2 Name: ")

#MENU INPUT CHECKER	
def choiceChecker(): #CHECKS IF MENU CHOICE IS VALID
	global choice
	global validChoice
	while validChoice == False:
		cls()
		menu()
		print()
		choice = getChoice()
		if choice.isdigit() == True:
			choice = int(choice)
			validChoice = True
		else:
			cls()
			menu()
			print()
			print("Invalid choice. Try again.")
			time.sleep(0.5)
			validChoice == False 
def nameCheckerP1(x): #DEFAULT VALUE FOR PLAYER 1 IF NAME INPUT IS BLANK
	if len(x) == 0:
		x = "P1"
		return x
	else:
		return x
def nameCheckerP2(x): #DEFAULT VALUE FOR PLAYER 2 IF NAME INPUT IS BLANK
	if len(x) == 0:
		x = "P2"
		return x
	else:
		return x


#LOAD/SAVE
def newGame(): #LOADS THE DEFAULT CHESSBOARD
	global turn
	fileHandle = open("defaultBoard.txt", "r")
	values = []
	for line in fileHandle:
		pieces = line[:-1].split(',')
		values.append(pieces)
	turn = str(values[0])[2:4]
	board[9] = values[1]
	board[8] = values[2]
	board[7] = values[3]
	board[6] = values[4]
	board[5] = values[5]
	board[4] = values[6]
	board[3] = values[7]
	board[2] = values[8]
	board[1] = values[9]
	fileHandle.close()

def saveGame(): #SAVES THE GAME
	fileHandle = open("gameBoard.txt", "w")
	if len(board) == 0:
		cls()
	else:
		if turn == "P1":
			fileHandle.write(turn + " " + P1 + "\n")
			fileHandle.write("P2" + " " + P2 + "\n")
		elif turn == "P2":
			fileHandle.write(turn + " " + P2 + "\n")
			fileHandle.write("P1" + " " + P1 + "\n")
		for i in sorted(board, reverse=True):
			fileHandle.write(str(board[i][0]) + "," + str(board[i][1]) + "," + str(board[i][2]) + "," + str(board[i][3]) + "," + str(board[i][4]) + "," + str(board[i][5]) + "," + str(board[i][6]) + "," + str(board[i][7]) + "\n")
	fileHandle.close()

def finishGame(): #DELETES CONTENT OF GAMEBOARD.TXT AFTER THE END OF GAME
	global board
	fileHandle = open("gameBoard.txt", "w")
	board = {}
	fileHandle.write("")
	fileHandle.close()

def loadGame(): #RELOADS THE LAST TURN OF THE UNFINISHED GAME
	global turn
	global P1
	global P2
	fileHandle = open("gameBoard.txt", "r")
	values = []
	for line in fileHandle:
		pieces = line[:-1].split(',')
		values.append(pieces)

	if len(values) == 0:
		cls()
		artwork()
		print()
		print("             	                  LOAD GAME \n")
		print("                              NO SAVE FILE FOUND")


	else:
		turn = str(values[0])[2:4]
		if turn == "P1":
			P1 = str(values[0])[5:len(str(values[0]))-2]
			P2 = str(values[1])[5:len(str(values[1]))-2]
		elif turn == "P2":
			P2 = str(values[0])[5:len(str(values[0]))-2]
			P1 = str(values[1])[5:len(str(values[1]))-2]
		board[9] = values[2]
		board[8] = values[3]
		board[7] = values[4]
		board[6] = values[5]
		board[5] = values[6]
		board[4] = values[7]
		board[3] = values[8]
		board[2] = values[9]
		board[1] = values[10]
	fileHandle.close()

#STRING (X-AXIS) TO INDEX CONVERTER 

def convertXDestToindex(): #CONVERTS THE X-AXIS OF THE DESTINATION COORDINATE TO INDEX(0-7)
	global x_dest
	global y_dest
	global x_move
	global y_move
	for k in range(0, len(board[9])):
		x_dest = str(x_dest)
		if x_dest.upper() == board[9][k]:
			x_dest = k

	x_dest = int(x_dest)
	y_dest = int(y_dest)
	x_move = int(x_move)
	y_move = int(y_move)

def convertXPieceToindex(): #CONVERTS THE X-AXIS OF THE PIECE SELECTION COORDINATE TO INDEX(0-7)
	global x_move
	for k in range(0, len(board[9])):
		x_move = str(x_move)
		if x_move.upper() == board[9][k]:
			x_move = k

#CHECKS FOR INVALID PIECE SELECTION
def protectBlank(): #PREVENTS THE SELECTION OF EMPTY CHESSBOARD BLOCKS
	global validatePiece
	if board[int(y_move)][int(x_move)] == " ":
		chessBoard()
		print()
		print("There is no chess piece in this coordinates.")
		time.sleep(0.8)
		validatePiece = False

def protectOpponentPiece(): #PREVENTS THE SELECTION OF OPPONNENTS CHESS PIECE
	global validatePiece
	global validateXPiece
	global validateYPiece
	if board[int(y_move)][int(x_move)] != " ":
		if turn == "P1":
			for piece in chessPieceLarge:
				if board[int(y_move)][int(x_move)] == piece:
					chessBoard()
					print()
					print("You cannot select opponent's chess piece")
					time.sleep(0.6)
					validatePiece = False
					validateYPiece = False
					validateXPiece = False
					break

			else:
				if validateXPiece == True and validateYPiece == True:
					validatePiece = True


				else:
					validatePiece = False
					validateYPiece = False
					validateXPiece = False


		elif turn == "P2":
			for piece in chessPieceSmall:
				if board[int(y_move)][int(x_move)] == piece:
					chessBoard()
					print()
					print("You cannot select opponent's chess piece")
					time.sleep(0.6)
					validatePiece == False
					validateYPiece = False
					validateXPiece = False
					break

			else:
				if validateXPiece == True and validateYPiece == True:
					validatePiece = True
				else:
					validatePiece = False
					validateYPiece = False
					validateXPiece = False

def invalidPieceChecker(): #DISPLAYS IF PIECE SELECTION IS INVALID
	if InvalidPieceX == True and InvalidPieceY == True:
		chessBoard()
		print()
		print("Invalid x and y coordinate. Try again.")
		validateXPiece = False
		validateYPiece = False
		time.sleep(0.5)
	elif InvalidPieceX == True and InvalidPieceY == False:
		chessBoard()
		print()
		print("Invalid x coordinate.")
		validateXPiece = False
		validateYPiece = False
		time.sleep(0.5)
	elif InvalidPieceX == False and InvalidPieceY == True:
		chessBoard()
		print()
		print("Invalid y coordinate.")
		validateXPiece = False
		validateYPiece = False
		time.sleep(0.5)

def pieceChecker(): #MAIN PIECE SELECTION CHECKER
	global movePiece
	global validatePiece
	global validateDest
	global choice
	global quit
	global validChoice 
	while validatePiece == False:
		chessBoard()
		movePiece = choosePiece().upper()
		if movePiece == "QUIT":
			choice = 0
			validatePiece = True
			validateDest = True
			quit = True
			validChoice = False

		elif len(movePiece) == 0 or len(movePiece) < 2:
			chessBoard()
			print()
			print("Invalid x and y coordinate. Try again.")
			time.sleep(0.5)

		elif len(movePiece) >= 2:
			xPieceChecker()
			yPieceChecker()
			invalidPieceChecker()
			
			if validateXPiece == True and validateYPiece == True:
				convertXPieceToindex()
				protectBlank()
				protectOpponentPiece()
				validateDest = False
				
def xPieceChecker(): #X-COORDINATE CHECKER FOR PIECE SELECTION
	global validatePiece
	global validateXPiece
	global movePiece
	global x_move
	global InvalidPieceX

	x_move = str(movePiece[0])
	if x_move.isalpha() == True:
		for coordinate in board[9]:
			if x_move.upper() == coordinate:
				validateXPiece = True
				InvalidPieceX = False
				break	
		else:	
			chessBoard()
			print()
			print("X-coordinate is out of range.")
			time.sleep(0.5)
			validateXPiece = False
			InvalidPieceX = False
	else:
		#cls()
		#chessBoard()
		#print()
		#print("Invalid x-coodinate.")
		InvalidPieceX = True
		#time.sleep(0.5)
		validateXPiece = False

def yPieceChecker(): #Y-COORDINATE CHECKER FOR PIECE SELECTION
	global validateYPiece
	global y_move
	global InvalidPieceY
	y_move = str(movePiece[1:len(movePiece)])
	if y_move.isdigit() == True:
		#print(y_piece)
		for coordinate in range(1, 9):
			if y_move == str(coordinate):
				#print(y_piece, coordinate)
				validateYPiece = True
				InvalidPieceY = False
				break	
		else:
			chessBoard()
			print()
			print("Y-coordinate is out of range.")
			time.sleep(0.5)
			validateYPiece = False
			InvalidPieceY = False
				
	else:
		#cls()
		#chessBoard()
		#print()
		#print("Invalid y-coodinate.")
		InvalidPieceY = True
		#time.sleep(0.5)
		validateYPiece = False

#LOGIC
def validMove(y2, x2, y1, x1): #SWAPS THE VALUE OF BLANK BLOCKS AND CHESS PIECE IF MOVE IS VALID
	temp = board[y2][x2]
	board[y2][x2] = board[y1][x1]
	board[y1][x1] = temp

def changeTurn(): #CHANGES THE TURN AFTER THE VALID MOVE 
	global turn
	if turn == "P1":
		turn = "P2"
	elif turn == "P2":
		turn = "P1"

def showPlayer(): #DISPLAYS THE NAME OF THE PLAYER WHO WILL TURN
	if turn == "P1":
		name = P1
		return name
	else:
		name = P2
		return name	

def attack():
	board[y_dest][x_dest] = " "
	temp = board[y_move][x_move]
	board[y_move][x_move] = board[y_dest][x_dest]
	board[y_dest][x_dest] = temp

def attackChecker():
	global validatePiece
	global choice
	global validateDest
	global quit
	global validChoice
	global movePiece

	if turn == "P1":
		if board[y_dest][x_dest] == "K":
			attack()
			refresh()
			name = showPlayer()
			print(name, "has attacked the king at", placePiece, "from", movePiece)
			print(name.upper(), "WINS! \n")
			choice = 0
			validatePiece = True
			validateDest = True
			quit = True
			validChoice = False
			finishGame()
			input("<<PRESS ENTER TO CONTINUE>>")
			finishGame()
			
		else:
			attack()
			refresh()
			name = showPlayer()
			print(name, "has attacked the chess piece at", placePiece, "from", movePiece)
			time.sleep(1)
			validatePiece = False
			validateDest = True
			movePiece = ""
			swapPawn()
			time.sleep(1)

	elif turn == "P2":
		if board[y_dest][x_dest] == "k":
			attack()
			refresh()
			name = showPlayer()
			print(name, "has attacked the king at", placePiece, "from", movePiece)
			print(name.upper(), "WINS! \n")
			choice = 0
			validatePiece = True
			validateDest = True
			quit = True
			validChoice = False
			finishGame()
			input("<<PRESS ENTER TO CONTINUE>>")
			finishGame()
			
		else:
			attack()
			refresh()
			name = showPlayer()
			print(name, "has attacked the chess piece at", placePiece, "from", movePiece)
			time.sleep(1)
			validatePiece = False
			validateDest = True
			movePiece = ""
			swapPawn()
			time.sleep(1)

#VALID MOVES
def swapPawn():
	if turn == "P1":
		if y_dest == 8 and board[y_dest][x_dest] == "p":
			validSwap = False
			time.sleep(2)
			while validSwap == False:
				refresh()
				print("You can swap your pawn to [R] rook or [Q] queen.")
				piece = input("Choose one: ")
				if piece.isalpha() == True:
					for i in swapList:
						if piece.lower() == i.lower():
							piece = piece.lower()
							board[y_dest][x_dest] = piece
							validSwap = True
							break
					else:
						refresh()
						print("Invalid choice. Try again.")
						time.sleep(0.5)
						validSwap = False
				else:
					refresh()
					print("Invalid choice. Try again.")
					time.sleep(0.5)
					validSwap = False

	elif turn == "P2":
		if y_dest == 1 and board[y_dest][x_dest] == "P":
			validSwap = False
			while validSwap == False:
				refresh()
				print("You can swap your pawn to [R] rook or [Q] queen.")
				piece = input("Choose one: ")
				if piece.isalpha() == True:
					for i in swapList:
						if piece.upper() == i.upper():
							piece = piece.upper()
							board[y_dest][x_dest] = piece
							validSwap = True
							break
					else:
						refresh()
						print("Invalid choice. Try again.")
						time.sleep(0.5)
						validSwap = False
				else:
					refresh()
					print("Invalid choice. Try again.")
					time.sleep(0.5)
					validSwap = False

def pawnMove():
	global validateDest

	if y_dest == (y_move + 1) and x_dest == (x_move):
		if board[y_move][x_move] == "p":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the pawn at", movePiece,"to", placePiece)
			time.sleep(0.5)
			swapPawn()
			validateDest = True
		else:
			refresh()
			print("Your move is invalid.")
			validateDest = False

	elif y_dest == (y_move - 1) and x_dest == (x_move):
		if board[y_move][x_move] == "P":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the pawn at", movePiece,"to", placePiece)
			time.sleep(0.5)
			swapPawn()
			validateDest = True
		else:
			refresh()
			print("Your move is invalid.")
			validateDest = False

	elif y_dest == (y_move + 2) and x_dest == (x_move):
		if board[y_move][x_move] == "p": 
			if y_move == 2:
				if board[y_move + 1][x_move] == " ":
					validMove(y_dest, x_dest, y_move, x_move)
					refresh()
					name = showPlayer()
					print(name, "moved the pawn at", movePiece,"to", placePiece)
					time.sleep(0.5)
					swapPawn()
					validateDest = True
				else:
					refresh()
					print("Your move is invalid. Something's blocking your move.")
			else:
				refresh()
				print("Your move is invalid.")
				validateDest = False

	elif y_dest == (y_move - 2) and x_dest == (x_move):
		if board[y_move][x_move] == "P":
			if y_move == 7:
				if board[y_move - 1][x_move] == " ":
					validMove(y_dest, x_dest, y_move, x_move)
					refresh()
					name = showPlayer()
					print(name, "moved the pawn at", movePiece,"to", placePiece)
					time.sleep(0.5)
					swapPawn()
					validateDest = True
				else:
					refresh()
					print("Your move is invalid. Something's blocking your move.")
		else:
			refresh()
			print("Your move is invalid.")
			validateDest = False

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False
	
	time.sleep(1)

def horseMove():
	global validateDest 
	if y_dest == (y_move + 2) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True
	
	elif y_dest == (y_move - 2) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 1) and x_dest == (x_move - 2):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 1) and x_dest == (x_move + 2):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 1) and x_dest == (x_move - 2):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 1) and x_dest == (x_move + 2):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the horse at", movePiece,"to", placePiece)
		validateDest = True

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False

	time.sleep(0.5)

def kingMove():
	global validateDest
	#Move 1 Tile forward
	if y_dest == (y_move + 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True
	#Move 1 tile backward
	elif y_dest == (y_move - 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	#Move 1 tile to the left
	elif y_dest == (y_move) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	#Move 1 tile to the right
	elif y_dest == (y_move) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	#Move 1 tile to diagonal upward left
	elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	#Move 1 tile to diagonal upward right
	elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True
	#Move 1 tile to diagonal downward left
	elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	#Move 1 tile to diagonal downward right
	elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the king at", movePiece,"to", placePiece)
		validateDest = True

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False
	time.sleep(1)

def rookMove():
	global validateDest
	#upward
	if y_dest == (y_move + 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the rook at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 4) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 5) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 7) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#downward
	elif y_dest == (y_move - 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the rook at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#sideward left
	elif y_dest == (y_move) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the rook at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move) and x_dest == (x_move - 2):
		if board[y_move][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 3):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 4):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 5):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 6):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 7):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the rook at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move) and x_dest == (x_move + 2):
		if board[y_move][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 3):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 4):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 5):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 6):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 7):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the rook at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False
	
	time.sleep(1)

def bishopMove():
	global validateDest

	#upward right
	if y_dest == (y_move + 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the bishop at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
		if board[y_move + 1][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#upward left
	elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the bishop at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
		if board[y_move + 1][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False


	elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False		

	elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False	

	#downward left
	elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the bishop at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
		if board[y_move - 1][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#downward right
	elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the bishop at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
		if board[y_move - 1][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the bishop at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False
	
	time.sleep(1)

def queenMove():
	global validateDest
	#FORWARD MOVES
	#UPWARD LEFT
	if y_dest == (y_move + 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
		if board[y_move + 1][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False
	
	elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] 	== " " and board[y_move + 4][x_move - 4] 	== " " and board[y_move + 5][x_move - 5] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
		if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] 	== " " and board[y_move + 4][x_move - 4] 	== " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#UPWARD
	elif y_dest == (y_move + 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False


	elif y_dest == (y_move + 4) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 5) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] 	== " " and board[y_move + 3][x_move] 	== " " and board[y_move + 4][x_move] 	== " " and board[y_move + 5][x_move] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 7) and x_dest == (x_move):
		if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] 	== " " and board[y_move + 3][x_move] 	== " " and board[y_move + 4][x_move] 	== " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#UPWARD RIGHT

	elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
		if board[y_move + 1][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] 	== " " and board[y_move + 4][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] 	== " " and board[y_move + 4][x_move + 4] 	== " " and board[y_move + 5][x_move + 5] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
		if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] 	== " " and board[y_move + 4][x_move + 4] 	== " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#SIDEWARD LEFT
	elif y_dest == (y_move) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move) and x_dest == (x_move - 2):
		if board[y_move][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 3):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 4):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 5):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] 	== " " and board[y_move][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 6):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] 	== " " and board[y_move][x_move - 4] 	== " " and board[y_move][x_move - 5] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move - 7):
		if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] 	== " " and board[y_move][x_move - 4] 	== " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False


	#SIDEWARD RIGHT
	elif y_dest == (y_move) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move) and x_dest == (x_move + 2):
		if board[y_move][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 3):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 4):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 5):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] 	== " " and board[y_move][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 6):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] 	== " " and board[y_move][x_move + 4] 	== " " and board[y_move][x_move + 5] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move) and x_dest == (x_move + 7):
		if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] 	== " " and board[y_move][x_move + 4] 	== " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#DOWNWARD LEFT
	elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
		if board[y_move - 1][x_move - 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] 	== " " and board[y_move - 4][x_move - 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] 	== " " and board[y_move - 4][x_move - 4] 	== " " and board[y_move - 5][x_move - 5] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
		if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] 	== " " and board[y_move - 4][x_move - 4] 	== " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#DOWNWARD MOVES
	elif y_dest == (y_move - 1) and x_dest == (x_move):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] 	== " " and board[y_move - 4][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] 	== " " and board[y_move - 3][x_move] 	== " " and board[y_move - 4][x_move] 	== " " and board[y_move - 5][x_move] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move):
		if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] 	== " " and board[y_move - 3][x_move] 	== " " and board[y_move - 4][x_move] 	== " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	#DOWNWARD RIGHT
	elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
		validMove(y_dest, x_dest, y_move, x_move)
		refresh()
		name = showPlayer()
		print(name, "moved the queen at", movePiece,"to", placePiece)
		validateDest = True

	elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
		if board[y_move - 1][x_move + 1] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] 	== " " and board[y_move - 4][x_move + 4] == " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] 	== " " and board[y_move - 4][x_move + 4] 	== " " and board[y_move - 5][x_move + 5] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
		if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] 	== " " and board[y_move - 4][x_move + 4] 	== " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] 	== " ":
			validMove(y_dest, x_dest, y_move, x_move)
			refresh()
			name = showPlayer()
			print(name, "moved the queen at", movePiece,"to", placePiece)
			validateDest = True
		else:
			refresh()
			print("Your move is invalid. Something's blocking your move.")
			validateDest = False

	else:
		refresh()
		print("Your move is invalid.")
		validateDest = False
	
	time.sleep(1)


#PREVENTS FRIENDLY FIRE
def protectPieceP2():
	global validateDest
	if board[y_dest][x_dest].isupper() == True:
		refresh()
		print("You cannot attack your own chess piece.")
		validateDest = False
	else:
		attackChecker()

def protectPieceP1():
	global validateDest
	if board[y_dest][x_dest].islower() == True:
		refresh()
		print("You cannot attack your own chess piece.")
		time.sleep(1)
		validateDest = False
	else:
		attackChecker()


#CHECKS FOR INVALID DESTINATION 
def destChecker():
	global placePiece
	global validateDest
	global validatePiece
	global validateXPiece
	global validateYPiece
	global x_dest
	global y_dest
	global x_move
	global y_move
	global turn
	global validChoice
	global quit
	while validateDest == False:
		chessBoard()
		placePiece = chooseDestination()
		placePiece = placePiece.upper()

		if placePiece == "REPLACE":
			validatePiece = False
			validateDest = True

		elif placePiece == "QUIT":
			choice = 0
			validatePiece = True
			validateDest = True
			quit = True
			validChoice = False


		elif len(placePiece) == 0 or len(placePiece) < 2:
			chessBoard()
			print()
			print("Invalid x and y coordinate. Try again.")
			time.sleep(0.5)

		elif len(placePiece) >= 2:
			validatePiece = True
			xDestChecker()
			yDestChecker()
			invalidDestChecker()
			if validateXDest == True and validateYDest == True:
				convertXDestToindex()
				if board[y_dest][x_dest] == " ":
					if board[y_move][x_move] == "p" or board[y_move][x_move] == "P":
						pawnMove()
					elif board[y_move][x_move] == "h" or board[y_move][x_move] == "H":
						horseMove()

					elif board[y_move][x_move] == "k" or board[y_move][x_move] == "K":
						kingMove()

					elif board[y_move][x_move] == "r" or board[y_move][x_move] == "R":
						rookMove()

					elif board[y_move][x_move] == "b" or board[y_move][x_move] == "B":
						bishopMove()

					elif board[y_move][x_move] == "q" or board[y_move][x_move] == "Q":
						queenMove()
					else:
						refresh()
						print("Your move is invalid.")
						time.sleep(1)
						validateDest = False
					time.sleep(0.5)
					#Pawn Piece
				else:
					if movePiece == placePiece:
						refresh()
						print("You cannot select the same coordinate.")
						time.sleep(1)
						validateDest = False
					else:
						if turn == "P1":

							if board[y_move][x_move] == "p":
								if y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP1()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "h": 
								if y_dest == (y_move + 2) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move - 2) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move + 1) and x_dest == (x_move - 2):
									protectPieceP1()
								elif y_dest == (y_move + 1) and x_dest == (x_move + 2):
									protectPieceP1()
								elif y_dest == (y_move - 1) and x_dest == (x_move - 2):
									protectPieceP1()
								elif y_dest == (y_move - 1) and x_dest == (x_move + 2):
									protectPieceP1()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "k":
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP1()
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP1()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "r":
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP1()
								elif y_dest == (y_move + 2) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP1()

								elif y_dest == (y_move - 2) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 4) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#sideward left
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move - 2):
									if board[y_move][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 3):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 4):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 5):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 6):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 7):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move + 2):
									if board[y_move][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 3):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 4):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 5):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 6):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 7):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "b":
								#upward right
								if y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
									if board[y_move + 1][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#upward left
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP1()

								elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
									if board[y_move + 1][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
										protectPieceP1()	
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False		
								elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False	
								#downward left
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
									if board[y_move - 1][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward right
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP1()

								elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
									if board[y_move - 1][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
								

								#elif turn == "P2" and board[y_move][x_move] == "P":
								#	if y_dest == (y_move - 1) and x_dest == (x_move + 1):
								#		protectPieceP2()
								#	elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
								#		protectPieceP2()
							elif board[y_move][x_move] == "q":
								#rookmoves
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP1()
								elif y_dest == (y_move + 2) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP1()
								elif y_dest == (y_move - 2) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 4) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 5) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 6) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 7) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#sideward left
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move - 2):
									if board[y_move][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 3):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 4):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 5):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 6):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 7):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#sideward right
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move) and x_dest == (x_move + 2):
									if board[y_move][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 3):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 4):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 5):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 6):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 7):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP1()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
									if board[y_move + 1][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#upward left
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP1()

								elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
									if board[y_move + 1][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
										protectPieceP1()	
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False		
								elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False	
								#downward left
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP1()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
									if board[y_move - 1][x_move - 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward right
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP1()

								elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
									if board[y_move - 1][x_move + 1] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] == " ":
										protectPieceP1()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False						
						elif turn == "P2":
							if board[y_move][x_move] == "P":
								if y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP2()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "H": 
								if y_dest == (y_move + 2) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move - 2) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move + 1) and x_dest == (x_move - 2):
									protectPieceP2()
								elif y_dest == (y_move + 1) and x_dest == (x_move + 2):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move - 2):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move + 2):
									protectPieceP2()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "K":
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP2()
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "R":
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP2()
								elif y_dest == (y_move + 2) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP2()

								elif y_dest == (y_move - 2) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 4) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#sideward left
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move - 2):
									if board[y_move][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 3):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 4):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 5):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 6):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 7):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move + 2):
									if board[y_move][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 3):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 4):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 5):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 6):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 7):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
							elif board[y_move][x_move] == "B":
								#upward right
								if y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
									if board[y_move + 1][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#upward left
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP2()

								elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
									if board[y_move + 1][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
										protectPieceP2()	
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False		
								elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False	
								#downward left
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
									if board[y_move - 1][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward right
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP2()

								elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
									if board[y_move - 1][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False
								

								#elif turn == "P2" and board[y_move][x_move] == "P":
								#	if y_dest == (y_move - 1) and x_dest == (x_move + 1):
								#		protectPieceP2()
								#	elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
								#		protectPieceP2()
							elif board[y_move][x_move] == "Q":
								#rookmoves
								if y_dest == (y_move + 1) and x_dest == (x_move):
									protectPieceP2()
								elif y_dest == (y_move + 2) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move):
									if board[y_move + 1][x_move] == " " and board[y_move + 2][x_move] == " " and board[y_move + 3][x_move] == " " and board[y_move + 4][x_move] == " " and board[y_move + 5][x_move] == " " and board[y_move + 6][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward
								elif y_dest == (y_move - 1) and x_dest == (x_move):
									protectPieceP2()
								elif y_dest == (y_move - 2) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 4) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 5) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 6) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 7) and x_dest == (x_move):
									if board[y_move - 1][x_move] == " " and board[y_move - 2][x_move] == " " and board[y_move - 3][x_move] == " " and board[y_move - 4][x_move] == " " and board[y_move - 5][x_move] == " " and board[y_move - 6][x_move] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#sideward left
								elif y_dest == (y_move) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move - 2):
									if board[y_move][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 3):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 4):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 5):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 6):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move - 7):
									if board[y_move][x_move - 1] == " " and board[y_move][x_move - 2] == " " and board[y_move][x_move - 3] == " " and board[y_move][x_move - 4] == " " and board[y_move][x_move - 5] == " " and board[y_move][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#sideward right
								elif y_dest == (y_move) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move) and x_dest == (x_move + 2):
									if board[y_move][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 3):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 4):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 5):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 6):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move) and x_dest == (x_move + 7):
									if board[y_move][x_move + 1] == " " and board[y_move][x_move + 2] == " " and board[y_move][x_move + 3] == " " and board[y_move][x_move + 4] == " " and board[y_move][x_move + 5] == " " and board[y_move][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 1) and x_dest == (x_move + 1):
									protectPieceP2()
								elif y_dest == (y_move + 2) and x_dest == (x_move + 2):
									if board[y_move + 1][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 3) and x_dest == (x_move + 3):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move + 4):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move + 5):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 6) and x_dest == (x_move + 6):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 7) and x_dest == (x_move + 7):
									if board[y_move + 1][x_move + 1] == " " and board[y_move + 2][x_move + 2] == " " and board[y_move + 3][x_move + 3] == " " and board[y_move + 4][x_move + 4] == " " and board[y_move + 5][x_move + 5] == " " and board[y_move + 6][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								#upward left
								elif y_dest == (y_move + 1) and x_dest == (x_move - 1):
									protectPieceP2()

								elif y_dest == (y_move + 2) and x_dest == (x_move - 2):
									if board[y_move + 1][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 3) and x_dest == (x_move - 3):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " ":
										protectPieceP2()	
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 4) and x_dest == (x_move - 4):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move + 5) and x_dest == (x_move - 5):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move + 6) and x_dest == (x_move - 6):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False		
								elif y_dest == (y_move + 7) and x_dest == (x_move - 7):
									if board[y_move + 1][x_move - 1] == " " and board[y_move + 2][x_move - 2] == " " and board[y_move + 3][x_move - 3] == " " and board[y_move + 4][x_move - 4] == " " and board[y_move + 5][x_move - 5] == " " and board[y_move + 6][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False	
								#downward left
								elif y_dest == (y_move - 1) and x_dest == (x_move - 1):
									protectPieceP2()
								elif y_dest == (y_move - 2) and x_dest == (x_move - 2):
									if board[y_move - 1][x_move - 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False
								elif y_dest == (y_move - 3) and x_dest == (x_move - 3):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move - 4):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move - 5):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move - 6):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move - 7):
									if board[y_move - 1][x_move - 1] == " " and board[y_move - 2][x_move - 2] == " " and board[y_move - 3][x_move - 3] == " " and board[y_move - 4][x_move - 4] == " " and board[y_move - 5][x_move - 5] == " " and board[y_move - 6][x_move - 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								#downward right
								elif y_dest == (y_move - 1) and x_dest == (x_move + 1):
									protectPieceP2()

								elif y_dest == (y_move - 2) and x_dest == (x_move + 2):
									if board[y_move - 1][x_move + 1] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 3) and x_dest == (x_move + 3):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 4) and x_dest == (x_move + 4):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 5) and x_dest == (x_move + 5):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 6) and x_dest == (x_move + 6):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								elif y_dest == (y_move - 7) and x_dest == (x_move + 7):
									if board[y_move - 1][x_move + 1] == " " and board[y_move - 2][x_move + 2] == " " and board[y_move - 3][x_move + 3] == " " and board[y_move - 4][x_move + 4] == " " and board[y_move - 5][x_move + 5] == " " and board[y_move - 6][x_move + 6] == " ":
										protectPieceP2()
									else:
										refresh()
										print("Your move is invalid. Something's blocking your move.")
										validateDest = False

								else:
									refresh()
									print("Your move is invalid.")
									validateDest = False						
					time.sleep(0.5)
										


			else:
				if validateXPiece == True and validateYPiece == True:
					validatePiece = True
				else:
					validatePiece = False
					validateYPiece = False
					validateXPiece = False

			if validateDest == True:
				changeTurn()
				validatePiece = False

def xDestChecker():
	global validateDest
	global validateXDest
	global placePiece
	global x_dest
	global InvalidDestX

	x_dest = str(placePiece[0])
	if x_dest.isalpha() == True:
		for coordinate in board[9]:
			if x_dest.upper() == coordinate:
				validateXDest = True
				InvalidDestX = False
				break	
		else:	
			chessBoard()
			print()
			print("X-coordinate is out of range.")
			time.sleep(0.5)
			validateXDest = False
			InvalidDestX = False
	else:
		#cls()
		#chessBoard()
		#print()
		#print("Invalid x-coodinate.")
		InvalidDestX = True
		#time.sleep(0.5)
		validateXDest = False

def yDestChecker():
	global validateYDest
	global y_dest
	global InvalidDestY
	y_dest = str(placePiece[1:len(placePiece)])
	if y_dest.isdigit() == True:
		#print(y_piece)
		for coordinate in range(1, 9):
			if y_dest == str(coordinate):
				#print(y_piece, coordinate)
				validateYDest = True
				InvalidDestY = False
				break	
		else:
			chessBoard()
			print()
			print("Y-coordinate is out of range.")
			time.sleep(0.5)
			validateYDest = False
			InvalidDestY = False
				
	else:
		#cls()
		#chessBoard()
		#print()
		#print("Invalid y-coodinate.")
		InvalidDestY = True
		#time.sleep(0.5)
		validateYDest = False

def invalidDestChecker():
	if InvalidDestX == True and InvalidDestY == True:
		chessBoard()
		print()
		print("Invalid x and y coordinate. Try again.")
		validateXDest = False
		validateYDest = False
		time.sleep(0.5)
	elif InvalidDestX == True and InvalidDestY == False:
		chessBoard()
		print()
		print("Invalid x coordinate.")
		validateXDest = False
		validateYDest = False
		time.sleep(0.5)
	elif InvalidDestX == False and InvalidDestY == True:
		chessBoard()
		print()
		print("Invalid y coordinate.")
		validateXDest = False
		validateYDest = False
		time.sleep(0.5)



#INITIALIZE
def reloadVars():
	global validChoice
	global validatePiece
	global validateXPiece
	global validateYPiece
	global validateDest
	global validateXDest
	global validateYDest
	global InvalidPieceX
	global InvalidPieceY
	global InvalidDestX
	global InvalidDestY
	global quit
	validChoice = False
	validatePiece = False
	validateXPiece = False
	validateYPiece = False
	validateDest = False
	validateXDest = False
	validateYDest = False
	InvalidPieceX = False
	InvalidPieceY = False
	InvalidDestX = False
	InvalidDestY = False
	quit = False


'''
board = {9: ["A", "B", "C", "D", "E", "F", "G", "H"],
		 8: ["R", "H", "B", "Q", "K", "B", "H", "R"], 
		 7: ["P", "P", "P", "P", "P", "P", "P", "P"],
		 6: [" ", " ", " ", " ", " ", " ", " ", " "],
		 5: [" ", " ", " ", " ", " ", " ", " ", " "],
		 4: [" ", " ", " ", " ", " ", " ", " ", " "],
		 3: [" ", " ", " ", " ", " ", " ", " ", " "],
		 2: ["p", "p", "p", "p", "p", "p", "p", "p"],
		 1: ["r", "h", "b", "q", "k", "b", "h", "r"]}
'''

import os
import time

#INITIALIZATION
choice = 0
validChoice = False
validatePiece = False
validateXPiece = False
validateYPiece = False
validateDest = False
validateXDest = False
validateYDest = False
InvalidPieceX = False
InvalidPieceY = False
InvalidDestX = False
InvalidDestY = False

board = {}
chessPieceSmall = ["p", "r", "h", "b", "q", "k"]
chessPieceLarge = ["P", "R", "H", "B", "Q", "K"]
swapList = ["r", "q"]
turn = " "


#MAIN PROGRAM

validateDest = False
while choice != 3:
	choice = 0
	choiceChecker()
	if choice == 1:
		reloadVars()
		cls()
		artwork()
		print()
		print("             	                 NEW GAME \n")
		P1 = nameCheckerP1(nameP1())
		P2 = nameCheckerP2(nameP2())
		print()	
		refreshNew()
		print("                This game has an autosaving feature.")
		time.sleep(1)
		refreshNew()
		print("                This game has an autosaving feature..")
		time.sleep(1)
		refreshNew()
		print("                This game has an autosaving feature...")
		time.sleep(1)
		refreshNew()
		print("        End the game by typing \"quit\" in the coordinate selector.")
		time.sleep(1)
		refreshNew()
		print("        End the game by typing \"quit\" in the coordinate selector..")
		time.sleep(1)
		refreshNew()
		print("        End the game by typing \"quit\" in the coordinate selector...")
		time.sleep(1)
		refreshNew()
		input("                        << PRESS ENTER TO START >>")
		newGame()
		quit = False
		while quit == False:
			saveGame()
			pieceChecker()
			destChecker()
			saveGame()

	elif choice == 2:
		reloadVars(	)
		loadGame()
		if len(board) == 0:
			time.sleep(0.5)

		else:
			quit = False
			while quit == False:
				saveGame()
				pieceChecker()
				destChecker()
				saveGame()

	elif choice == 2:
		reloadVars(	)
		loadGame()
		if len(board) == 0:
			time.sleep(0.5)

		else:
			quit = False
			while quit == False:
				saveGame()
				pieceChecker()
				destChecker()
				saveGame()


	elif choice == 2:
		reloadVars(	)
		loadGame()
		if len(board) == 0:
			time.sleep(0.5)

		else:
			quit = False
			while quit == False:
				saveGame()
				pieceChecker()
				destChecker()
				saveGame()

	elif choice == 3:
		reloadVars()
		cls()
		artwork()
		print()
		print("             	                   CREDITS")
		print("           I WON'T BE ABLE TO SEE AND FIX BUGS WITHOUT THESE PEOPLE \n")
		print("             	        BETA TESTER 1 : MYSELF (RAIN)")
		print("             	        BETA TESTER 2 : JOSE CASTILLO")
		print("             	        BETA TESTER 3 : JUMAR MACATO")
		print("             	        BETA TESTER 4 : DHOZ ARIZOBAL")
		print("             	        BETA TESTER 5 : ZEK MAGNAYE ")
		print()
		input("                        << PRESS ENTER TO GO BACK >>")
		choice = 0
		validChoice = False

	elif choice == 4:
		break

	else:
		cls()
		menu()
		print()
		print("Invalid choice. Try again.")
		time.sleep(0.5)
		choice = 0
		validChoice = False



